# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-19 13:58
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('gravity', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TiltConfiguration',
            fields=[
                ('sensor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='tilt_configuration', serialize=False, to='gravity.GravitySensor')),
                ('color', models.CharField(choices=[('Black', 'Black'), ('Orange', 'Orange'), ('Green', 'Green'), ('Blue', 'Blue'), ('Purple', 'Purple'), ('Red', 'Red'), ('Yellow', 'Yellow'), ('Pink', 'Pink')], help_text='The color of Tilt Hydrometer being used', max_length=32, unique=True)),
                ('average_period_secs', models.IntegerField(default=120, help_text='Number of seconds over which to average readings')),
                ('median_window_vals', models.IntegerField(default=10000, help_text="Number of readings to include in the average window. If set to less than ~1.3*average_period_secs, you will get a moving average. If set to greater, you'll get the median value.")),
                ('polling_frequency', models.IntegerField(default=15, help_text='How frequently Fermentrack should update the temp/gravity reading from the sensor')),
                ('bluetooth_device_id', models.IntegerField(default=0, help_text='Almost always 0 - Change if you have Bluetooth issues')),
            ],
        ),
        migrations.CreateModel(
            name='TiltGravityCalibrationPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orig_value', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='Original (Sensor) Gravity Value')),
                ('actual_value', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='Actual (Measured) Gravity Value')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gravity.TiltConfiguration')),
            ],
        ),
        migrations.CreateModel(
            name='TiltTempCalibrationPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orig_value', models.DecimalField(decimal_places=4, help_text='Original (Sensor) Temp Value', max_digits=8, verbose_name='Original (Sensor) Temp Value')),
                ('actual_value', models.DecimalField(decimal_places=4, help_text='Actual (Measured) Temp Value', max_digits=8, verbose_name='Actual (Measured) Temp Value')),
                ('temp_format', models.CharField(choices=[('F', 'Fahrenheit'), ('C', 'Celsius')], default='F', max_length=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gravity.TiltConfiguration')),
            ],
        ),
        migrations.AlterField(
            model_name='gravitysensor',
            name='temp_format',
            field=models.CharField(choices=[('F', 'Fahrenheit'), ('C', 'Celsius')], default='F', help_text='Temperature units', max_length=1),
        ),
    ]
