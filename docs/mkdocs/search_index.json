{
    "docs": [
        {
            "location": "/", 
            "text": "Fermentrack documentation\n\n\nWhat is Fermentrack?\n\n\nFermentrack is a complete replacement for the web interface used by BrewPi written in Python using the Django web framework. It is designed to be used alongside a rewritten BrewPi-Script as well as ESP8266-based BrewPi controllers. Support for other BrewPi controllers (Arduino, Spark, and Fuscus) will be forthcoming.\n\n\nFermentrack is currently intended to be installed on a fresh installation of Raspbian and will conflict with brewpi-www if installed on the same server.\n\n\nIncluded with Fermentrack\n\n\n\n\nFermentrack\n - The Django-based replacement for brewpi-www. Licensed under MIT license.\n\n\nbrewpi-script\n - Installed alongside Fermentrack is brewpi-script. Licensed under GPL v3.\n\n\nBrewPi Firmware (Various)\n - As Fermentrack develops, it may install various versions of the BrewPi firmware. It is expected that most of these will be licensed under GPL v3, though other licenses may apply.\n\n\n\n\nOther components used in or bundled with Fermentrack may have their own licensing requirements. These components can be referenced \nhere\n.\n\n\nNew Features\n\n\nOne of the key reasons to write Fermentrack was to incorporate features that are missing in the official BrewPi web interface. The following are just some of the features that have been added:\n\n\n\n\nNative multi-chamber support\n\n\nCleaner, more intuitive controller setup\n\n\nIntegrated support for ESP8266-based controllers\n\n\nOfficial support for \"legacy\" controllers\n\n\nNative support (including mDNS autodetection) for WiFi controllers\n\n\nRobust device detection for serial controllers \n\n\n\n\nMissing Features\n\n\nAt the moment, Fermentrack doesn't support 100% of the features of the official BrewPi web client. Some of these missing features (as well as the version they are expected to be added) include:\n\n\n\n\nSpark/Fuscus support (v3)\n\n\nFuscus support (v3)\n\n\nSupport for \"modern\" (non-legacy branch) controllers (v3)\n\n\n\n\nA full table of controllers/expected hardware availability is available \nin the documentation\n.\n\n\nRequirements\n\n\n\n\nRaspberry Pi Zero, Zero W, 2 B, or 3 /w Internet Connection\n\n\nFresh Raspbian install (Lite/Pixel supported, Oct 2016 version or later)\n\n\n1GB of free space available\n\n\n\n\nPLEASE NOTE\n - Fermentrack is currently intended to be installed on a fresh installation of Raspbian. It is \nnot\n intended to be installed alongside brewpi-www and will conflict with the apache server brewpi-www installs.", 
            "title": "Home"
        }, 
        {
            "location": "/#fermentrack-documentation", 
            "text": "", 
            "title": "Fermentrack documentation"
        }, 
        {
            "location": "/#what-is-fermentrack", 
            "text": "Fermentrack is a complete replacement for the web interface used by BrewPi written in Python using the Django web framework. It is designed to be used alongside a rewritten BrewPi-Script as well as ESP8266-based BrewPi controllers. Support for other BrewPi controllers (Arduino, Spark, and Fuscus) will be forthcoming.  Fermentrack is currently intended to be installed on a fresh installation of Raspbian and will conflict with brewpi-www if installed on the same server.", 
            "title": "What is Fermentrack?"
        }, 
        {
            "location": "/#included-with-fermentrack", 
            "text": "Fermentrack  - The Django-based replacement for brewpi-www. Licensed under MIT license.  brewpi-script  - Installed alongside Fermentrack is brewpi-script. Licensed under GPL v3.  BrewPi Firmware (Various)  - As Fermentrack develops, it may install various versions of the BrewPi firmware. It is expected that most of these will be licensed under GPL v3, though other licenses may apply.   Other components used in or bundled with Fermentrack may have their own licensing requirements. These components can be referenced  here .", 
            "title": "Included with Fermentrack"
        }, 
        {
            "location": "/#new-features", 
            "text": "One of the key reasons to write Fermentrack was to incorporate features that are missing in the official BrewPi web interface. The following are just some of the features that have been added:   Native multi-chamber support  Cleaner, more intuitive controller setup  Integrated support for ESP8266-based controllers  Official support for \"legacy\" controllers  Native support (including mDNS autodetection) for WiFi controllers  Robust device detection for serial controllers", 
            "title": "New Features"
        }, 
        {
            "location": "/#missing-features", 
            "text": "At the moment, Fermentrack doesn't support 100% of the features of the official BrewPi web client. Some of these missing features (as well as the version they are expected to be added) include:   Spark/Fuscus support (v3)  Fuscus support (v3)  Support for \"modern\" (non-legacy branch) controllers (v3)   A full table of controllers/expected hardware availability is available  in the documentation .", 
            "title": "Missing Features"
        }, 
        {
            "location": "/#requirements", 
            "text": "Raspberry Pi Zero, Zero W, 2 B, or 3 /w Internet Connection  Fresh Raspbian install (Lite/Pixel supported, Oct 2016 version or later)  1GB of free space available   PLEASE NOTE  - Fermentrack is currently intended to be installed on a fresh installation of Raspbian. It is  not  intended to be installed alongside brewpi-www and will conflict with the apache server brewpi-www installs.", 
            "title": "Requirements"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nCan I change the temperature format on a beer I've started logging?\n\n\nNo. To prevent inconsistency the log format is permanently set when logging begins to the temperature format associated with the device. If you would like to change the format and restart logging, do the following:\n\n\n\n\nUpdate the temperature format in control constants to the desired format\n\n\nStop logging the existing beer\n\n\nStart logging a new beer\n\n\n\n\nHelp - I forgot my Fermentrack login/password!\n\n\nThankfully, this is a pretty easy issue to overcome. Django provides the \nmanage.py\n command line script which contains the \ncreatesuperuser\n command. To leverage this, do the following (assuming the standard install locations):\n\n\n\n\nLog into your Raspberry Pi via ssh and switch to the user you installed Fermentrack to (generally this can be done with the command \nsudo -u fermentrack -i\n assuming you installed to the \nfermentrack\n user)\n\n\nChange to the user's home directory (\ncd ~\n)\n\n\nEnable the virtualenv (\nsource venv/bin/activate\n)\n\n\nChange to the Fermentrack directory (\ncd fermentrack\n)\n\n\nRun the createsuperuser command (\n./manage.py createsuperuser\n)\n\n\nFollow the prompts to create a new superuser account\n\n\nLog into the Fermentrack admin panel and delete/modify the old account. The Fermentrack admin panel can be accessed through the \nSettings\n page (the gear in the upper right) and clicking the \"Django Admin\" button.\n\n\n\n\nWhat happens to my beer logs/active profiles/other data if I change the Fermentrack \"Preferred Timezone\"?\n\n\nNot much. To prevent this being an issue Fermentrack uses UTC (GMT) internally and converts times to your local timezone on the fly. Feel free to update your preferred timezone as you move, travel, or are otherwise inclined without worrying about how this might impact your existing logs or active profiles.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#can-i-change-the-temperature-format-on-a-beer-ive-started-logging", 
            "text": "No. To prevent inconsistency the log format is permanently set when logging begins to the temperature format associated with the device. If you would like to change the format and restart logging, do the following:   Update the temperature format in control constants to the desired format  Stop logging the existing beer  Start logging a new beer", 
            "title": "Can I change the temperature format on a beer I've started logging?"
        }, 
        {
            "location": "/faq/#help-i-forgot-my-fermentrack-loginpassword", 
            "text": "Thankfully, this is a pretty easy issue to overcome. Django provides the  manage.py  command line script which contains the  createsuperuser  command. To leverage this, do the following (assuming the standard install locations):   Log into your Raspberry Pi via ssh and switch to the user you installed Fermentrack to (generally this can be done with the command  sudo -u fermentrack -i  assuming you installed to the  fermentrack  user)  Change to the user's home directory ( cd ~ )  Enable the virtualenv ( source venv/bin/activate )  Change to the Fermentrack directory ( cd fermentrack )  Run the createsuperuser command ( ./manage.py createsuperuser )  Follow the prompts to create a new superuser account  Log into the Fermentrack admin panel and delete/modify the old account. The Fermentrack admin panel can be accessed through the  Settings  page (the gear in the upper right) and clicking the \"Django Admin\" button.", 
            "title": "Help - I forgot my Fermentrack login/password!"
        }, 
        {
            "location": "/faq/#what-happens-to-my-beer-logsactive-profilesother-data-if-i-change-the-fermentrack-preferred-timezone", 
            "text": "Not much. To prevent this being an issue Fermentrack uses UTC (GMT) internally and converts times to your local timezone on the fly. Feel free to update your preferred timezone as you move, travel, or are otherwise inclined without worrying about how this might impact your existing logs or active profiles.", 
            "title": "What happens to my beer logs/active profiles/other data if I change the Fermentrack \"Preferred Timezone\"?"
        }, 
        {
            "location": "/install/", 
            "text": "Installing Fermentrack\n\n\nThere are three main ways to install Fermentrack - One-line fully automated, semi-automated, and manual.\n\n\nRegardless of what method you choose, all of these expect that your Raspberry Pi has been properly set up with a working copy of Raspbian. \n\n\nFully Automated - \nVideo\n\n\nThe easiest way to install Fermentrack is via a single command executed on your Raspberry Pi. To install via this method, simply SSH into your Raspberry Pi and execute:\n\n\ncurl -L install.fermentrack.com | sudo bash\n\n\nFollow the prompts as needed, and once the script completes, you're done! \n\n\nSemi-Automated\n\n\nIf you prefer a slightly less automatic installation method, you can download the fermentrack-tools repo from git and use the install script contained therein. To install using this script, do the following:\n\n\n\n\nLog into your Raspberry Pi\n\n\ninstall \ngit\n (Type \nsudo apt-install git-core\n)\n\n\nClone the repo (\ngit clone https://github.com/thorrak/fermentrack-tools.git\n)\n\n\nRun the install script (\nsudo fermentrack-tools/install.sh\n)\n\n\nFollow the prompts on screen. Relaunch the install script if prompted.\n\n\nOnce installation completes, open a web browser and connect to Fermentrack to complete the installation process.\n\n\n\n\nManual\n\n\nIf you are interested in installing Fermentrack by hand, please refer to the manual installation instructions located \nhere\n.", 
            "title": "Index"
        }, 
        {
            "location": "/install/#installing-fermentrack", 
            "text": "There are three main ways to install Fermentrack - One-line fully automated, semi-automated, and manual.  Regardless of what method you choose, all of these expect that your Raspberry Pi has been properly set up with a working copy of Raspbian.", 
            "title": "Installing Fermentrack"
        }, 
        {
            "location": "/install/#fully-automated-video", 
            "text": "The easiest way to install Fermentrack is via a single command executed on your Raspberry Pi. To install via this method, simply SSH into your Raspberry Pi and execute:  curl -L install.fermentrack.com | sudo bash  Follow the prompts as needed, and once the script completes, you're done!", 
            "title": "Fully Automated - Video"
        }, 
        {
            "location": "/install/#semi-automated", 
            "text": "If you prefer a slightly less automatic installation method, you can download the fermentrack-tools repo from git and use the install script contained therein. To install using this script, do the following:   Log into your Raspberry Pi  install  git  (Type  sudo apt-install git-core )  Clone the repo ( git clone https://github.com/thorrak/fermentrack-tools.git )  Run the install script ( sudo fermentrack-tools/install.sh )  Follow the prompts on screen. Relaunch the install script if prompted.  Once installation completes, open a web browser and connect to Fermentrack to complete the installation process.", 
            "title": "Semi-Automated"
        }, 
        {
            "location": "/install/#manual", 
            "text": "If you are interested in installing Fermentrack by hand, please refer to the manual installation instructions located  here .", 
            "title": "Manual"
        }, 
        {
            "location": "/install/Raspi Setup/", 
            "text": "Preparing a Raspberry Pi for Fermentrack\n\n\nPrior to installing Fermentrack, you need to install Raspbian and set everything up. Click the link below\nto watch a video showing how to prepare the Raspberry Pi using a Mac, or read the linked instructions below for your operating system.\n\n\nPrepare the Raspberry Pi - \n[Video]\n\n\n\n\nDownload the latest version of Raspbian from \nhere\n. I recommend the Lite version as I prefer headless installations, but the full version works as well.\n\n\nBurn Raspbian to your SD card using \nthese instructions\n.\n\n\nEnable SSH\n on your Raspberry Pi by writing an empty file named \"ssh\" to the root of the SD card.\n\n\nOptional\n - Configure WiFi - See the note below if you want to configure WiFi now, thus preventing having to find an ethernet cable\n\n\nPlug the SD card into your Raspberry Pi, connect the Pi to ethernet (if you did not configure WiFi), and plug in power.\n\n\nLocate the IP address for your Raspberry Pi This can generally be done by executing \narp -a | grep raspberry\n however you can also locate your Raspberry Pi by logging into your router and looking for the device.\n\n\nUpdate the Raspberry Pi software by running \nsudo apt-get update\n and \nsudo apt-get upgrade\n.\n\n\nRun \nraspi-config\n and configure the Pi. At a minimum, expand the filesystem (option 1).\n\n\nUpdate the default password for the \npi\n user using \npasswd\n\n\nOptional\n - \nConfigure WiFi\n on your Raspberry Pi (if needed)\n\n\n\n\nRaspberry Pi Setup - Additional Info about Install-Time WiFi Configuration\n\n\nIn early 2016 there was \nan update\n made to Raspbian which allows for install-time configuration of WiFi. Buried deep within a blog post, there was the following note:\n\n\n\"If a wpa_supplicant.conf file is placed into the /boot/ directory, this will be moved to the /etc/wpa_supplicant/ directory the next time the system is booted, overwriting the network settings; this allows a Wifi configuration to be preloaded onto a card from a Windows or other machine that can only see the boot partition.\"\n\n\nWhile not discussed in the official documentation, this greatly simplifies headless configuration (especially for Raspberry Pi zeros).\n\n\nTo utilize this, prior to the initial boot on a newly flashed Raspbian installation, create a \nwpa_supplicant.conf\n file in the \n/boot\n directory of the SD card with the following contents (adjusting to match your network configuration):\n\n\nnetwork={\n    ssid=\nYOUR_SSID\n\n    psk=\nYOUR_PASSWORD\n\n    key_mgmt=WPA-PSK\n}\n\n\n\n\nNote - In the above, \nssid\n is the name of your wireless network, \npsk\n is the password for your wireless network (if applicable), and \nkey_mgmt\n is the password management protocol (which, for most home networks these days is WPA-PSK)", 
            "title": "Raspberry Pi Setup"
        }, 
        {
            "location": "/install/Raspi Setup/#preparing-a-raspberry-pi-for-fermentrack", 
            "text": "Prior to installing Fermentrack, you need to install Raspbian and set everything up. Click the link below\nto watch a video showing how to prepare the Raspberry Pi using a Mac, or read the linked instructions below for your operating system.", 
            "title": "Preparing a Raspberry Pi for Fermentrack"
        }, 
        {
            "location": "/install/Raspi Setup/#prepare-the-raspberry-pi-video", 
            "text": "Download the latest version of Raspbian from  here . I recommend the Lite version as I prefer headless installations, but the full version works as well.  Burn Raspbian to your SD card using  these instructions .  Enable SSH  on your Raspberry Pi by writing an empty file named \"ssh\" to the root of the SD card.  Optional  - Configure WiFi - See the note below if you want to configure WiFi now, thus preventing having to find an ethernet cable  Plug the SD card into your Raspberry Pi, connect the Pi to ethernet (if you did not configure WiFi), and plug in power.  Locate the IP address for your Raspberry Pi This can generally be done by executing  arp -a | grep raspberry  however you can also locate your Raspberry Pi by logging into your router and looking for the device.  Update the Raspberry Pi software by running  sudo apt-get update  and  sudo apt-get upgrade .  Run  raspi-config  and configure the Pi. At a minimum, expand the filesystem (option 1).  Update the default password for the  pi  user using  passwd  Optional  -  Configure WiFi  on your Raspberry Pi (if needed)", 
            "title": "Prepare the Raspberry Pi - [Video]"
        }, 
        {
            "location": "/install/Raspi Setup/#raspberry-pi-setup-additional-info-about-install-time-wifi-configuration", 
            "text": "In early 2016 there was  an update  made to Raspbian which allows for install-time configuration of WiFi. Buried deep within a blog post, there was the following note:  \"If a wpa_supplicant.conf file is placed into the /boot/ directory, this will be moved to the /etc/wpa_supplicant/ directory the next time the system is booted, overwriting the network settings; this allows a Wifi configuration to be preloaded onto a card from a Windows or other machine that can only see the boot partition.\"  While not discussed in the official documentation, this greatly simplifies headless configuration (especially for Raspberry Pi zeros).  To utilize this, prior to the initial boot on a newly flashed Raspbian installation, create a  wpa_supplicant.conf  file in the  /boot  directory of the SD card with the following contents (adjusting to match your network configuration):  network={\n    ssid= YOUR_SSID \n    psk= YOUR_PASSWORD \n    key_mgmt=WPA-PSK\n}  Note - In the above,  ssid  is the name of your wireless network,  psk  is the password for your wireless network (if applicable), and  key_mgmt  is the password management protocol (which, for most home networks these days is WPA-PSK)", 
            "title": "Raspberry Pi Setup - Additional Info about Install-Time WiFi Configuration"
        }, 
        {
            "location": "/install/manual/", 
            "text": "Manual Installation\n\n\nUnfortunately, these instructions haven't been fully written yet. That said, below is a general overview of what needs to happen:\n\n\n\n\nLog into your Raspberry Pi via SSH or pull up a terminal window\n\n\nInstall the system-wide packages (nginx, etc.) \nsudo apt-get install -y git-core build-essential python-dev python-pip nginx libzmq-dev libevent-dev python-virtualenv\n\n\nAdd the Fermentrack user \nuseradd -m -G dialout fermentrack\n\n\nClone the fermentrack repo \nsudo -u fermentrack git clone https://github.com/thorrak/fermentrack.git \"/home/fermentrack/fermentrack\"\n\n\nSet up  virtualenv \ncd ~fermentrack\n \nsudo -u fermentrack virtualenv \"venv\"\n\n\nRun the fermentrack upgrade script \nsudo -u fermentrack ~fermentrack/fermentrack/utils/upgrade.sh\n\n\nCreate the nginx configuration file, link, and restart nginx (See \nfermentrack-tools/nginx-configs/default-fermentrack\n as an example)", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/manual/#manual-installation", 
            "text": "Unfortunately, these instructions haven't been fully written yet. That said, below is a general overview of what needs to happen:   Log into your Raspberry Pi via SSH or pull up a terminal window  Install the system-wide packages (nginx, etc.)  sudo apt-get install -y git-core build-essential python-dev python-pip nginx libzmq-dev libevent-dev python-virtualenv  Add the Fermentrack user  useradd -m -G dialout fermentrack  Clone the fermentrack repo  sudo -u fermentrack git clone https://github.com/thorrak/fermentrack.git \"/home/fermentrack/fermentrack\"  Set up  virtualenv  cd ~fermentrack   sudo -u fermentrack virtualenv \"venv\"  Run the fermentrack upgrade script  sudo -u fermentrack ~fermentrack/fermentrack/utils/upgrade.sh  Create the nginx configuration file, link, and restart nginx (See  fermentrack-tools/nginx-configs/default-fermentrack  as an example)", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/Apache and PHP Support/", 
            "text": "Legacy (PHP/Apache) Application Support\n\n\nUnlike apps such as RaspberryPints and BrewPi-www which use \nApache\n to serve webpages, Fermentrack uses \nnginx\n. If you wish to run applications other than Fermentrack on the same Raspberry Pi you will need to configure nginx to serve those applications instead of Apache.\n\n\nFermentrack-tools includes a script which can be used to install this support automatically. \n\n\nUnderstanding Legacy Support\n\n\nTo support legacy applications, the fermentrack-tools script does the following:\n\n\n\n\nInstall \nphp5-common\n, \nphp5-cli\n, and \nphp5-fpm\n to allow Nginx to serve php files\n\n\nDisable \napache2\n from launching at startup\n\n\nCreate a new nginx configuration file serving webpages from \n/var/www/html\n on port 81\n\n\n\n\nNote\n - Due to the port change mentioned above, any apps that were previously running at \nhttp://\nyour-ip\n/\n will now be running at \nhttp://\nyour-ip\n:81/\n\n\nInstallation\n\n\nAlthough fermentrack-tools offers a script to allow for fully automated installation of support for PHP/legacy apps, support can be installed manually as well.\n\n\nAutomated Installation\n\n\nTo run the fully automated installation script, simply SSH into your Raspberry Pi and execute:\n\n\ncurl -L install-legacy-support.fermentrack.com | sudo bash\n\n\nManual Installation\n\n\nTo manually install legacy app support, you will need to do the following as root:\n\n\n\n\nInstall PHP5 support - \napt-get install php5-common php5-cli php5-fpm\n\n\nDisable \napache2\n from running at startup - \nupdate-rc.d apache2 disable\n\n\nDisable any currently running instance of \napache2\n - \nservice apache2 stop\n\n\nInstall the appropriate configuration file to \nnginx\n. An example configuration file can be found \nhere\n, and must be installed in \n/etc/nginx/sites-enabled\n\n\nRestart PHP5-FPM - \nservice php5-fpm restart\n\n\nRestart Nginx - \nservice nginx restart\n\n\n\n\nLegacy BrewPi-www Installation Support\n\n\nAlthough performing the above actions will allow brewpi-www to run alongside Fermentrack, doing so is not recommended. Attempting to run brewpi-www in this way can result in issues as Fermentrack and brewpi-www compete to access/manage your fermentation controller.", 
            "title": "Legacy (Apache/PHP) App Support"
        }, 
        {
            "location": "/install/Apache and PHP Support/#legacy-phpapache-application-support", 
            "text": "Unlike apps such as RaspberryPints and BrewPi-www which use  Apache  to serve webpages, Fermentrack uses  nginx . If you wish to run applications other than Fermentrack on the same Raspberry Pi you will need to configure nginx to serve those applications instead of Apache.  Fermentrack-tools includes a script which can be used to install this support automatically.", 
            "title": "Legacy (PHP/Apache) Application Support"
        }, 
        {
            "location": "/install/Apache and PHP Support/#understanding-legacy-support", 
            "text": "To support legacy applications, the fermentrack-tools script does the following:   Install  php5-common ,  php5-cli , and  php5-fpm  to allow Nginx to serve php files  Disable  apache2  from launching at startup  Create a new nginx configuration file serving webpages from  /var/www/html  on port 81   Note  - Due to the port change mentioned above, any apps that were previously running at  http:// your-ip /  will now be running at  http:// your-ip :81/", 
            "title": "Understanding Legacy Support"
        }, 
        {
            "location": "/install/Apache and PHP Support/#installation", 
            "text": "Although fermentrack-tools offers a script to allow for fully automated installation of support for PHP/legacy apps, support can be installed manually as well.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/Apache and PHP Support/#automated-installation", 
            "text": "To run the fully automated installation script, simply SSH into your Raspberry Pi and execute:  curl -L install-legacy-support.fermentrack.com | sudo bash", 
            "title": "Automated Installation"
        }, 
        {
            "location": "/install/Apache and PHP Support/#manual-installation", 
            "text": "To manually install legacy app support, you will need to do the following as root:   Install PHP5 support -  apt-get install php5-common php5-cli php5-fpm  Disable  apache2  from running at startup -  update-rc.d apache2 disable  Disable any currently running instance of  apache2  -  service apache2 stop  Install the appropriate configuration file to  nginx . An example configuration file can be found  here , and must be installed in  /etc/nginx/sites-enabled  Restart PHP5-FPM -  service php5-fpm restart  Restart Nginx -  service nginx restart", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/Apache and PHP Support/#legacy-brewpi-www-installation-support", 
            "text": "Although performing the above actions will allow brewpi-www to run alongside Fermentrack, doing so is not recommended. Attempting to run brewpi-www in this way can result in issues as Fermentrack and brewpi-www compete to access/manage your fermentation controller.", 
            "title": "Legacy BrewPi-www Installation Support"
        }, 
        {
            "location": "/config/config/", 
            "text": "Configuring Fermentrack\n\n\nOnce you have finished installing Fermentrack, you are ready to configure it. You will be guided through the configuration process when you first connect to Fermentrack. An overview of this configuration procedure is below.\n\n\nUser Setup\n\n\nWhen you first access a new installation of Fermentrack you will be asked to set up a user account. This account will enable you to configure devices, configure the Fermentrack application, and view brew logs.\n\n\nSetting up the user account is extremely straightforward:\n\n\n\n\nFrom the root Fermentrack page, click \"Continue to guided installation\"\n\n\nOn the next page, entering the following:\n\n\nUsername\n - The username used to log into Fermentrack\n\n\nPassword\n - The password for the user account\n\n\nEmail Address\n - Currently unused, but may potentially be used later\n\n\n\n\n\n\nClick \"Create new user account\"\n\n\nDone!\n\n\n\n\nYou're now ready to move on to configuring the site settings.\n\n\nSite Settings\n\n\nAfter configuring a user account, the next step is to configure Fermentrack. The following are the available configuration options:\n\n\n\n\nBrewery Name\n - The name displayed in the upper left of each Fermentrack page\n\n\nDate time format display\n - The date format used on the dashboard of each device\n\n\nRequire login for dashboard\n - \nCurrently Unused\n - Should users be required to be logged in to \nview\n the dashboard/logs. Login will still be required to change temperature settings, configuration options, etc.\n\n\nTemperature format\n - The preferred (default) temperature format. Used when setting fermentation temperature profiles. Can be overridden per device.\n\n\nPreferred timezone\n - The preferred timezone you would like graphs displayed in. \nNote\n - All data is stored in UTC (GMT) - you are only selecting how the data will be \ndisplayed\n. Feel free to change this at any time with no issues. \n\n\nGit Update Type\n - Which releases you will be prompted to upgrade to. Can be set to \"tagged versions\" (which will generally be tested and stable), \"all commits\" which will include all new code releases, and \"None\".\n\n\n\n\nAll of these can be updated at any time by clicking on the \"gear\" icon in the upper right of any Fermentrack page.\n\n\nNotes for Advanced Users\n\n\nUser Accounts\n\n\nCurrently, Fermentrack has limited access control implemented, and is not yet designed for multiple user installations. This feature is planned for a later release - once it becomes available, different levels of access will be able to be specified on a per-user basis.\n\n\nIn the mean time if you need multiple user accounts they can be configured using the Django admin interface (accessible via the \"gear\" icon). Each account will need \"superuser\" access to be able to use the full functionality of Fermentrack. Again - please keep in mind - multiple user access is not officially supported. When access control functionality is implemented, any users created previously through this method will retain full access/control of Fermentrack.\n\n\nAdvanced Site Settings\n\n\nThere are a handful of additional site settings which are intended for advanced users and developers only. These settings can only be accessed via the Django admin. These settings include:\n\n\n\n\nAllow Git Branch Switching\n - Allows switching to a different git branch from within Fermentrack\n\n\nUser Has Completed Configuration\n - Determines if the user has completed the initial configuration workflow, or should be prompted to set Fermentrack up on next login\n\n\n\n\nAdditionally, graph colors can be configured via the Django admin. The graph color options include:\n\n\n\n\nGraph Beer Set Color\n - The color of the \"Beer Setting\" line\n\n\nGraph Beer Temp Color\n - The color of the \"Beer Temperature\" line\n\n\nGraph Fridge Set Color\n - The color of the \"Fridge Setting\" line\n\n\nGraph Fridge Temp Color\n - The color of the \"Fridge Temp\" line\n\n\nGraph Room Temp Color\n - The color of the \"Room Temp\" line\n\n\nGraph Gravity Color\n - (Currently unused) - For future specific gravity sensor support", 
            "title": "Configuration"
        }, 
        {
            "location": "/config/config/#configuring-fermentrack", 
            "text": "Once you have finished installing Fermentrack, you are ready to configure it. You will be guided through the configuration process when you first connect to Fermentrack. An overview of this configuration procedure is below.", 
            "title": "Configuring Fermentrack"
        }, 
        {
            "location": "/config/config/#user-setup", 
            "text": "When you first access a new installation of Fermentrack you will be asked to set up a user account. This account will enable you to configure devices, configure the Fermentrack application, and view brew logs.  Setting up the user account is extremely straightforward:   From the root Fermentrack page, click \"Continue to guided installation\"  On the next page, entering the following:  Username  - The username used to log into Fermentrack  Password  - The password for the user account  Email Address  - Currently unused, but may potentially be used later    Click \"Create new user account\"  Done!   You're now ready to move on to configuring the site settings.", 
            "title": "User Setup"
        }, 
        {
            "location": "/config/config/#site-settings", 
            "text": "After configuring a user account, the next step is to configure Fermentrack. The following are the available configuration options:   Brewery Name  - The name displayed in the upper left of each Fermentrack page  Date time format display  - The date format used on the dashboard of each device  Require login for dashboard  -  Currently Unused  - Should users be required to be logged in to  view  the dashboard/logs. Login will still be required to change temperature settings, configuration options, etc.  Temperature format  - The preferred (default) temperature format. Used when setting fermentation temperature profiles. Can be overridden per device.  Preferred timezone  - The preferred timezone you would like graphs displayed in.  Note  - All data is stored in UTC (GMT) - you are only selecting how the data will be  displayed . Feel free to change this at any time with no issues.   Git Update Type  - Which releases you will be prompted to upgrade to. Can be set to \"tagged versions\" (which will generally be tested and stable), \"all commits\" which will include all new code releases, and \"None\".   All of these can be updated at any time by clicking on the \"gear\" icon in the upper right of any Fermentrack page.", 
            "title": "Site Settings"
        }, 
        {
            "location": "/config/config/#notes-for-advanced-users", 
            "text": "", 
            "title": "Notes for Advanced Users"
        }, 
        {
            "location": "/config/config/#user-accounts", 
            "text": "Currently, Fermentrack has limited access control implemented, and is not yet designed for multiple user installations. This feature is planned for a later release - once it becomes available, different levels of access will be able to be specified on a per-user basis.  In the mean time if you need multiple user accounts they can be configured using the Django admin interface (accessible via the \"gear\" icon). Each account will need \"superuser\" access to be able to use the full functionality of Fermentrack. Again - please keep in mind - multiple user access is not officially supported. When access control functionality is implemented, any users created previously through this method will retain full access/control of Fermentrack.", 
            "title": "User Accounts"
        }, 
        {
            "location": "/config/config/#advanced-site-settings", 
            "text": "There are a handful of additional site settings which are intended for advanced users and developers only. These settings can only be accessed via the Django admin. These settings include:   Allow Git Branch Switching  - Allows switching to a different git branch from within Fermentrack  User Has Completed Configuration  - Determines if the user has completed the initial configuration workflow, or should be prompted to set Fermentrack up on next login   Additionally, graph colors can be configured via the Django admin. The graph color options include:   Graph Beer Set Color  - The color of the \"Beer Setting\" line  Graph Beer Temp Color  - The color of the \"Beer Temperature\" line  Graph Fridge Set Color  - The color of the \"Fridge Setting\" line  Graph Fridge Temp Color  - The color of the \"Fridge Temp\" line  Graph Room Temp Color  - The color of the \"Room Temp\" line  Graph Gravity Color  - (Currently unused) - For future specific gravity sensor support", 
            "title": "Advanced Site Settings"
        }, 
        {
            "location": "/config/Flashing a Controller/", 
            "text": "Flashing a Controller\n\n\nFermentrack includes software which allows you to easily download \n flash firmware to controllers. This feature is currently supported for the ESP8266 and Arduino architectures, and supports multiple families of firmware including BrewPi, BrewPiLess, and iSpindel. \n\n\nAll devices will need be flashed via serial over USB - including devices you ultimately want to use over WiFi.\n\n\nVideo Documentation\n\n\nPrefer to watch a video of this process? \nClick here to watch this on YouTube!\n \n\n\nAccessing the Flash Workflow\n\n\nFlashing a new controller is accomplished through the controller flashing interface. This can be accessed directly or through the guided device setup workflow. From the device menu, choose \"Flash Controller\".\n\n\nFlashing a Controller\n\n\n\n\n\n\nOnce in the flash workflow, click \"Refresh Firmware List from Fermentrack.com\". This downloads a list of availble, screened firmware from Fermentrack.com.\n\n\n\n\n\n\nAfter the list downloads, select your device family and click \"Submit\".\n\n\n\n\n\n\nOn the next screen, select the board (hardware variant) your device is based on. For some families, there may only be one option.\n\n\n\n\n\n\nDouble check your device family \n board on the following screen and then ensure that the device you want to flash is \nnot\n connected to the computer/device running Fermentrack. Once this is done click \"Scan Devices\"\n\n\n\n\n\n\nReview the \"Preexisting Devices\" list to ensure that the device you want to flash is \nnot\n listed. Assuming this is the case, connect the device you want to flash to the device running Fermentrack via a USB cable. Click \"Scan for New Devices\"\n\n\n\n\n\n\nYour device should now be detected and displayed in the list. If it isn't, return to an earlier step and restart the process. Click the \"Set Up\" button next to your device.\n\n\n\n\n\n\nOn the following screen, select the firmware you want to flash to the device. Click \"Flash to Device\".\n\n\n\n\n\n\nOnce the firmware has flashed successfully, your device is ready to use!", 
            "title": "Flashing a Controller"
        }, 
        {
            "location": "/config/Flashing a Controller/#flashing-a-controller", 
            "text": "Fermentrack includes software which allows you to easily download   flash firmware to controllers. This feature is currently supported for the ESP8266 and Arduino architectures, and supports multiple families of firmware including BrewPi, BrewPiLess, and iSpindel.   All devices will need be flashed via serial over USB - including devices you ultimately want to use over WiFi.", 
            "title": "Flashing a Controller"
        }, 
        {
            "location": "/config/Flashing a Controller/#video-documentation", 
            "text": "Prefer to watch a video of this process?  Click here to watch this on YouTube!", 
            "title": "Video Documentation"
        }, 
        {
            "location": "/config/Flashing a Controller/#accessing-the-flash-workflow", 
            "text": "Flashing a new controller is accomplished through the controller flashing interface. This can be accessed directly or through the guided device setup workflow. From the device menu, choose \"Flash Controller\".", 
            "title": "Accessing the Flash Workflow"
        }, 
        {
            "location": "/config/Flashing a Controller/#flashing-a-controller_1", 
            "text": "Once in the flash workflow, click \"Refresh Firmware List from Fermentrack.com\". This downloads a list of availble, screened firmware from Fermentrack.com.    After the list downloads, select your device family and click \"Submit\".    On the next screen, select the board (hardware variant) your device is based on. For some families, there may only be one option.    Double check your device family   board on the following screen and then ensure that the device you want to flash is  not  connected to the computer/device running Fermentrack. Once this is done click \"Scan Devices\"    Review the \"Preexisting Devices\" list to ensure that the device you want to flash is  not  listed. Assuming this is the case, connect the device you want to flash to the device running Fermentrack via a USB cable. Click \"Scan for New Devices\"    Your device should now be detected and displayed in the list. If it isn't, return to an earlier step and restart the process. Click the \"Set Up\" button next to your device.    On the following screen, select the firmware you want to flash to the device. Click \"Flash to Device\".    Once the firmware has flashed successfully, your device is ready to use!", 
            "title": "Flashing a Controller"
        }, 
        {
            "location": "/config/Serial Controller Setup/", 
            "text": "Setting up a controller connected via Serial using Guided Workflow\n\n\nPrior to setting up a controller with Fermentrack, please read the documentation specific to your controller's hardware. Supported hardware families include:\n\n\n\n\nArduino (and compatible)\n\n\nESP8266\n\n\nSpark Core\n\n\nNative Python (Fuscus)\n\n\n\n\nWhen setting up a controller to connect via serial, the selected \"port\" is incredibly important, but is prone to change on reboot or as other devices are connected. Please read the \"About Serial Port Autodetection\" note below for information on how Fermentrack handles this issue. \n\n\nUsing the Guided Workflow\n\n\n\n\nWith the controller disconnected from the Raspberry Pi, launch guided setup and select \"Add New Device (Guided)\" from the \"Select Device to Control\" dropdown\n\n\nSelect the correct board type from the dropdown and click \"Submit\"\n\n\nIf your device is already flashed, choose \"Yes - Already Flashed\". If it isn't, read \nthese instructions\n before continuing. \n\n\nIf setting up any device other than an ESP8266 click \"Begin Serial Autodetection\". If setting up an ESP8266, select \"Serial\" on the left, and then click \"Begin Serial Autodetection\"\n\n\nEnsure that the controller is not connected to the Raspberry Pi, and click \"Scan Devices\"\n\n\nConnect the controller to the Raspberry Pi\n\n\nClick \"Scan for New Devices\"\n\n\nChoose the device that corresponds to your Arduino and click \"Set Up\"\n\n\nEnter a name for the device, adjust settings as needed, and click \"Submit\"\n\n\n\n\nAbout Serial Port Autodetection\n\n\nBy default, Linux assigns serial ports to devices like BrewPi controllers based on the order they are connected. If you have multiple devices connected to your Raspberry Pi this can mean that Fermentrack could potentially mistake one device for another. To prevent this, Fermentrack includes a feature which will disregard the specified serial port when connecting to the controller and will instead connect to the device with the USB serial number that matches the device you set up.\n\n\nIf you wish to disable this feature and instead only connect to the specified serial port, uncheck the \"Prefer Connecting Via Udev\" option in the \"Manage Device\" screen.\n\n\nThis feature only works on Linux-based operating systems (including Raspbian for Raspberry Pi), and may not work if Fermentrack is installed on a Mac or Windows-based computer.", 
            "title": "Serial Controller Guided Setup"
        }, 
        {
            "location": "/config/Serial Controller Setup/#setting-up-a-controller-connected-via-serial-using-guided-workflow", 
            "text": "Prior to setting up a controller with Fermentrack, please read the documentation specific to your controller's hardware. Supported hardware families include:   Arduino (and compatible)  ESP8266  Spark Core  Native Python (Fuscus)   When setting up a controller to connect via serial, the selected \"port\" is incredibly important, but is prone to change on reboot or as other devices are connected. Please read the \"About Serial Port Autodetection\" note below for information on how Fermentrack handles this issue.", 
            "title": "Setting up a controller connected via Serial using Guided Workflow"
        }, 
        {
            "location": "/config/Serial Controller Setup/#using-the-guided-workflow", 
            "text": "With the controller disconnected from the Raspberry Pi, launch guided setup and select \"Add New Device (Guided)\" from the \"Select Device to Control\" dropdown  Select the correct board type from the dropdown and click \"Submit\"  If your device is already flashed, choose \"Yes - Already Flashed\". If it isn't, read  these instructions  before continuing.   If setting up any device other than an ESP8266 click \"Begin Serial Autodetection\". If setting up an ESP8266, select \"Serial\" on the left, and then click \"Begin Serial Autodetection\"  Ensure that the controller is not connected to the Raspberry Pi, and click \"Scan Devices\"  Connect the controller to the Raspberry Pi  Click \"Scan for New Devices\"  Choose the device that corresponds to your Arduino and click \"Set Up\"  Enter a name for the device, adjust settings as needed, and click \"Submit\"", 
            "title": "Using the Guided Workflow"
        }, 
        {
            "location": "/config/Serial Controller Setup/#about-serial-port-autodetection", 
            "text": "By default, Linux assigns serial ports to devices like BrewPi controllers based on the order they are connected. If you have multiple devices connected to your Raspberry Pi this can mean that Fermentrack could potentially mistake one device for another. To prevent this, Fermentrack includes a feature which will disregard the specified serial port when connecting to the controller and will instead connect to the device with the USB serial number that matches the device you set up.  If you wish to disable this feature and instead only connect to the specified serial port, uncheck the \"Prefer Connecting Via Udev\" option in the \"Manage Device\" screen.  This feature only works on Linux-based operating systems (including Raspbian for Raspberry Pi), and may not work if Fermentrack is installed on a Mac or Windows-based computer.", 
            "title": "About Serial Port Autodetection"
        }, 
        {
            "location": "/config/WiFi Controller Setup/", 
            "text": "Setting up a controller connected via WiFi using Guided Workflow\n\n\nPrior to setting up a controller with Fermentrack, please read the documentation specific to your controller's hardware. Supported hardware families include:\n\n\n\n\nArduino (and compatible)\n\n\nESP8266\n\n\nSpark Core\n\n\nNative Python (Fuscus)\n\n\n\n\nUsing the Guided Workflow\n\n\n\n\nAfter the controller is powered on and connected to your network, launch guided setup and select \"Add New Device (Guided)\" from the \"Select Device to Control\" dropdown\n\n\nSelect the correct board type (ESP8266) from the dropdown and click \"Submit\"\n\n\nIf your device is already flashed, choose \"Yes - Already Flashed\". If it isn't, read \nthese instructions\n before continuing. \n\n\nSelect \"WiFi\" on the left, and then click \"Scan WiFi via mDNS\"\n\n\nSelect the appropriate device from the \"Available (Uninstalled) Devices\" list, and click \"Set Up\"\n\n\nEnter a name for the device, adjust settings as needed, and click \"Submit\"", 
            "title": "WiFi Controller Guided Setup"
        }, 
        {
            "location": "/config/WiFi Controller Setup/#setting-up-a-controller-connected-via-wifi-using-guided-workflow", 
            "text": "Prior to setting up a controller with Fermentrack, please read the documentation specific to your controller's hardware. Supported hardware families include:   Arduino (and compatible)  ESP8266  Spark Core  Native Python (Fuscus)", 
            "title": "Setting up a controller connected via WiFi using Guided Workflow"
        }, 
        {
            "location": "/config/WiFi Controller Setup/#using-the-guided-workflow", 
            "text": "After the controller is powered on and connected to your network, launch guided setup and select \"Add New Device (Guided)\" from the \"Select Device to Control\" dropdown  Select the correct board type (ESP8266) from the dropdown and click \"Submit\"  If your device is already flashed, choose \"Yes - Already Flashed\". If it isn't, read  these instructions  before continuing.   Select \"WiFi\" on the left, and then click \"Scan WiFi via mDNS\"  Select the appropriate device from the \"Available (Uninstalled) Devices\" list, and click \"Set Up\"  Enter a name for the device, adjust settings as needed, and click \"Submit\"", 
            "title": "Using the Guided Workflow"
        }, 
        {
            "location": "/config/Advanced Controller Setup/", 
            "text": "Setting up a controller using the Advanced (Manual) Workflow\n\n\nPrior to setting up a controller with Fermentrack, please read the documentation specific to your controller's hardware. Supported hardware families include:\n\n\n\n\nArduino (and compatible)\n\n\nESP8266\n\n\nSpark Core\n\n\nNative Python (Fuscus)\n\n\n\n\nControllers can be se up to connect via both WiFi and serial. When setting up a controller to connect via serial the selected \"port\" is incredibly important but is prone to change on reboot or as other devices are connected. Please read the \"About Serial Port Autodetection\" note below for information on how Fermentrack handles this issue. \n\n\nSetting up a controller using Advanced Workflow\n\n\n\n\nConnect the controller to the Raspberry Pi\n\n\nLaunch guided setup and select \"Add New Device (Advanced)\"\n\n\nEnter the configuration options associated with the device.\n\n\n\n\nAbout Serial Port Autodetection\n\n\nBy default, Linux assigns serial ports to devices like BrewPi controllers based on the order they are connected. If you have multiple devices connected to your Raspberry Pi this can mean that Fermentrack could potentially mistake one device for another. To prevent this, Fermentrack includes a feature which will disregard the specified serial port when connecting to the controller and will instead connect to the device with the USB serial number that matches the device you set up.\n\n\nIf you wish to disable this feature and instead only connect to the specified serial port, uncheck the \"Prefer Connecting Via Udev\" option in the \"Manage Device\" screen.\n\n\nThis feature only works on Linux-based operating systems (including Raspbian for Raspberry Pi), and may not work if Fermentrack is installed on a Mac or Windows-based computer.", 
            "title": "Advanced (Manual) Controller Setup"
        }, 
        {
            "location": "/config/Advanced Controller Setup/#setting-up-a-controller-using-the-advanced-manual-workflow", 
            "text": "Prior to setting up a controller with Fermentrack, please read the documentation specific to your controller's hardware. Supported hardware families include:   Arduino (and compatible)  ESP8266  Spark Core  Native Python (Fuscus)   Controllers can be se up to connect via both WiFi and serial. When setting up a controller to connect via serial the selected \"port\" is incredibly important but is prone to change on reboot or as other devices are connected. Please read the \"About Serial Port Autodetection\" note below for information on how Fermentrack handles this issue.", 
            "title": "Setting up a controller using the Advanced (Manual) Workflow"
        }, 
        {
            "location": "/config/Advanced Controller Setup/#setting-up-a-controller-using-advanced-workflow", 
            "text": "Connect the controller to the Raspberry Pi  Launch guided setup and select \"Add New Device (Advanced)\"  Enter the configuration options associated with the device.", 
            "title": "Setting up a controller using Advanced Workflow"
        }, 
        {
            "location": "/config/Advanced Controller Setup/#about-serial-port-autodetection", 
            "text": "By default, Linux assigns serial ports to devices like BrewPi controllers based on the order they are connected. If you have multiple devices connected to your Raspberry Pi this can mean that Fermentrack could potentially mistake one device for another. To prevent this, Fermentrack includes a feature which will disregard the specified serial port when connecting to the controller and will instead connect to the device with the USB serial number that matches the device you set up.  If you wish to disable this feature and instead only connect to the specified serial port, uncheck the \"Prefer Connecting Via Udev\" option in the \"Manage Device\" screen.  This feature only works on Linux-based operating systems (including Raspbian for Raspberry Pi), and may not work if Fermentrack is installed on a Mac or Windows-based computer.", 
            "title": "About Serial Port Autodetection"
        }, 
        {
            "location": "/hardware/", 
            "text": "Hardware Comparison\n\n\nThere are four main types of hardware that currently support BrewPi firmware installations. Each have varying levels of support by Fermentrack.\n\n\n\n\nESP8266\n\n\nArduino\n\n\nNative Python (Fuscus)\n\n\nSpark Core\n\n\n\n\nThe following table shows which release is expected to have support for various controller types:\n\n\n\n\n\n\n\n\nRelease\n\n\nESP8266 Serial\n\n\nESP8266 WiFi\n\n\nArduino\n\n\nSpark\n\n\nFuscus (Native Python)\n\n\n\n\n\n\n\n\n\n\nv1\n\n\nNo\n\n\nYes\n\n\nNo\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nv1 (flash)\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nv2\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nv2 (flash)\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nv3\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nTargeted\n\n\nTargeted\n\n\n\n\n\n\n\n\nLegend:\n\n\n\n\nYes - Support confirmed in this version\n\n\nTargeted - Support targeted for this version\n\n\nNo - Unsupported in this version\n\n\nBlank - Unknown", 
            "title": "Index"
        }, 
        {
            "location": "/hardware/#hardware-comparison", 
            "text": "There are four main types of hardware that currently support BrewPi firmware installations. Each have varying levels of support by Fermentrack.   ESP8266  Arduino  Native Python (Fuscus)  Spark Core   The following table shows which release is expected to have support for various controller types:     Release  ESP8266 Serial  ESP8266 WiFi  Arduino  Spark  Fuscus (Native Python)      v1  No  Yes  No  No  No    v1 (flash)  No  No  No  No  No    v2  Yes  Yes  Yes  No  No    v2 (flash)  Yes  Yes  Yes  No  No    v3  Yes  Yes  Yes  Targeted  Targeted", 
            "title": "Hardware Comparison"
        }, 
        {
            "location": "/hardware/#legend", 
            "text": "Yes - Support confirmed in this version  Targeted - Support targeted for this version  No - Unsupported in this version  Blank - Unknown", 
            "title": "Legend:"
        }, 
        {
            "location": "/hardware/ESP8266/", 
            "text": "Fermentrack and ESP8266-based Controllers\n\n\nFermentrack was explicitly built to support ESP8266-based controllers - and supports them regardless of connection method (WiFi or Serial). \n\n\nFor more information on ESP8266-based firmware, please refer to one of the following:\n\n\n\n\nGitHub Repo\n\n\nHomeBrewTalk Thread\n\n\n\n\nIf connecting an ESP8266-based controller via serial, please note that by default Fermentrack will detect the USB serial number associated with your Arduino when initially configured, and will use that - instead of the specified serial port - to connect. For more information, read the \"About Serial Port Autodetection\" note in the \n\"Guided Setup\" instructions\n.\n\n\nSetting Up an ESP8266-based Controller in Fermentrack\n\n\nThere are two options for setting up a controller in Fermentrack - Guided Setup and Advanced (Manual) Setup.\n\n\nGuided Setup - WiFi\n - Instructions are available \nhere\n. When choosing the board type, select \"ESP8266\" from the dropdown.\n\n\nGuided Setup - Serial\n - Instructions are available \nhere\n. When choosing the board type, select \"ESP8266\" from the dropdown.\n\n\nManual Setup\n - Instructions are available \nhere\n.", 
            "title": "ESP8266"
        }, 
        {
            "location": "/hardware/ESP8266/#fermentrack-and-esp8266-based-controllers", 
            "text": "Fermentrack was explicitly built to support ESP8266-based controllers - and supports them regardless of connection method (WiFi or Serial).   For more information on ESP8266-based firmware, please refer to one of the following:   GitHub Repo  HomeBrewTalk Thread   If connecting an ESP8266-based controller via serial, please note that by default Fermentrack will detect the USB serial number associated with your Arduino when initially configured, and will use that - instead of the specified serial port - to connect. For more information, read the \"About Serial Port Autodetection\" note in the  \"Guided Setup\" instructions .", 
            "title": "Fermentrack and ESP8266-based Controllers"
        }, 
        {
            "location": "/hardware/ESP8266/#setting-up-an-esp8266-based-controller-in-fermentrack", 
            "text": "There are two options for setting up a controller in Fermentrack - Guided Setup and Advanced (Manual) Setup.  Guided Setup - WiFi  - Instructions are available  here . When choosing the board type, select \"ESP8266\" from the dropdown.  Guided Setup - Serial  - Instructions are available  here . When choosing the board type, select \"ESP8266\" from the dropdown.  Manual Setup  - Instructions are available  here .", 
            "title": "Setting Up an ESP8266-based Controller in Fermentrack"
        }, 
        {
            "location": "/hardware/Arduino/", 
            "text": "Fermentrack and Arduino-based Controllers\n\n\nFermentrack currently supports Arduino-based controllers connected via Serial (USB).\n\n\nBy default, Fermentrack will detect the USB serial number associated with your Arduino when initially configured, and will use that - instead of the specified serial port - to connect. For more information, read the \"About Serial Port Autodetection\" note in the \n\"Guided Setup\" instructions\n.\n\n\nSetting Up an Arduino-based Controller in Fermentrack\n\n\nThere are two options for setting up a controller in Fermentrack - Guided Setup and Advanced (Manual) Setup.\n\n\nGuided Setup\n - Instructions are available \nhere\n. When choosing the board type, select \"Arduino (and compatible)\" from the dropdown.\n\n\nManual Setup\n - Instructions are available \nhere\n.", 
            "title": "Arduino"
        }, 
        {
            "location": "/hardware/Arduino/#fermentrack-and-arduino-based-controllers", 
            "text": "Fermentrack currently supports Arduino-based controllers connected via Serial (USB).  By default, Fermentrack will detect the USB serial number associated with your Arduino when initially configured, and will use that - instead of the specified serial port - to connect. For more information, read the \"About Serial Port Autodetection\" note in the  \"Guided Setup\" instructions .", 
            "title": "Fermentrack and Arduino-based Controllers"
        }, 
        {
            "location": "/hardware/Arduino/#setting-up-an-arduino-based-controller-in-fermentrack", 
            "text": "There are two options for setting up a controller in Fermentrack - Guided Setup and Advanced (Manual) Setup.  Guided Setup  - Instructions are available  here . When choosing the board type, select \"Arduino (and compatible)\" from the dropdown.  Manual Setup  - Instructions are available  here .", 
            "title": "Setting Up an Arduino-based Controller in Fermentrack"
        }, 
        {
            "location": "/hardware/Native Python/", 
            "text": "Fermentrack and Fuscus (Native Python Controller)\n\n\nAs of now, serial connections are supported by Fermentrack, and therefore it is expected that Fuscus should be Fermentrack compatible. Fuscus support \nhas not been tested\n and should be considered experimental.\n\n\nDue to the nature of the serial ports used by Fuscus, the serial autodetection process cannot be used to set up a Fuscus-based controller. Connections to Fuscus can be set up using the \n\"advanced\" workflow\n and manually specifying the Fuscus serial port. \n\n\nNOTE\n - If setting up a Fuscus-installation manually, make sure to set \"prefer_connecting_via_udev\" to False. If this is true, BrewPi-Script may either not connect or connect to the wrong device.\n\n\nFurther down the development path are other features involving Fuscus such as direct installation and configuration management - though these are expected in v3 and beyond.", 
            "title": "Native Python (Fuscus)"
        }, 
        {
            "location": "/hardware/Native Python/#fermentrack-and-fuscus-native-python-controller", 
            "text": "As of now, serial connections are supported by Fermentrack, and therefore it is expected that Fuscus should be Fermentrack compatible. Fuscus support  has not been tested  and should be considered experimental.  Due to the nature of the serial ports used by Fuscus, the serial autodetection process cannot be used to set up a Fuscus-based controller. Connections to Fuscus can be set up using the  \"advanced\" workflow  and manually specifying the Fuscus serial port.   NOTE  - If setting up a Fuscus-installation manually, make sure to set \"prefer_connecting_via_udev\" to False. If this is true, BrewPi-Script may either not connect or connect to the wrong device.  Further down the development path are other features involving Fuscus such as direct installation and configuration management - though these are expected in v3 and beyond.", 
            "title": "Fermentrack and Fuscus (Native Python Controller)"
        }, 
        {
            "location": "/hardware/Spark/", 
            "text": "Fermentrack and Spark-based Controllers\n\n\nCurrently, Fermentrack does not support Spark-based controllers. Support for Spark based controllers is planned, but will be implemented later in the development path. (Currently planned for v3 or later)\n\n\nOnce implemented, Fermentrack will support controlling both legacy (Arduino/Fuscus) and modern (Spark) controllers from the same installation.", 
            "title": "Spark Core"
        }, 
        {
            "location": "/hardware/Spark/#fermentrack-and-spark-based-controllers", 
            "text": "Currently, Fermentrack does not support Spark-based controllers. Support for Spark based controllers is planned, but will be implemented later in the development path. (Currently planned for v3 or later)  Once implemented, Fermentrack will support controlling both legacy (Arduino/Fuscus) and modern (Spark) controllers from the same installation.", 
            "title": "Fermentrack and Spark-based Controllers"
        }, 
        {
            "location": "/about/architecture/", 
            "text": "The Fermentrack architecture\n\n\nThe Fermentrack stack is based on a front end application, a controller, and a firmware\nrunning on the device that handles reading temperatures, switching cooling and heating etc.\nEverything but the firmware part is running under a process manager which takes care of\nlaunching the front end and brewpi.py controller scripts.\n\n\n\n\nSee \ncomponents\n documentation for links and licenses.\n\n\nThe webserver nginx and chaussette WSGI server\n\n\nUsed to proxy http requests to chaussette over WSGI to the Fermentrack django application.\n\n\ncron\n\n\nUsed to start the Fermentrack stack, it starts the Circus process manager via a @reboot job,\nit also checks the status of circus every 10 seconds, if it not running it will start it.\nAll this is handled by a script: \nupdateCronCircus.sh\n\n\nSupports the following arguments: \n{start|stop|status|startifstopped|add2cron}\n where:\n\n\n\n\nstart\n - will start circusd and all the services\n\n\nstop\n - will quit circusd and all processes (note it would be started again in 10 minutes)\n\n\nstatus\n - will output a status of all processes running (see below)\n\n\nstartifstopped\n - will start the process manager if stopped (called from cron every 10 minutes)\n\n\nadd2cron\n - if crontab entries are missing, it will add them back.\n\n\n\n\nCrontab entries added with \nadd2cron\n:\n\n\n@reboot ~/fermentrack/brewpi-script/utils/updateCronCircus.sh start\n*/10 * * * * ~/fermentrack/brewpi-script/utils/updateCronCircus.sh startifstopped\n\n\n\nExample \nstatus\n output:\n\n\n$ ~/fermentrack/brewpi-script/utils/updateCronCircus.sh status\nFermentrack: active\nbrewpi-spawner: active\ncircusd-stats: active\ndev-brewpi1: active\n\n\n\nThe process manager \ncircus\n\n\nFermentrack is started at boot with the help of cron (see \ncron\n), the process manager handles\nall the different processes needed by Fermentrack.\n\n\n\n\nFermentrack\n - The django application (web interface) runs under chaussette\n\n\nbrewpi-spawner\n - An internal Fermentrack process for spawning controller scripts for controlling controllers like brewpi-esp8266.\n\n\ncircusd-stats\n - An Internal circus process for stats, not used yet.\n\n\ndev-brewpi1\n - Is a controller script spawned by brewpi-spawner, handing a controller.\n\n\n\n\nCircus documentation can be found \nhere\n.\n\n\nLogging\n\n\n\n\nCircus process manager logs:\n\n\n/home/fermentrack/fermentrack/log/circusd.log\n\n\n\n\n\n\nController script (brewpi.py) log: \n\n\n/home/fermentrack/fermentrack/log/dev-[name]-stdout.log\n\n\n\n\n\n\nController script (brewpi.py) error/info log:\n\n\n/home/fermentrack/fermentrack/log/dev-[name]-stderr.log\n\n\nController script spawner:\n\n\n/home/fermentrack/fermentrack/log/fermentrack-brewpi-spawner.log\n\n\nFermentrack django application:\n\n\n/home/fermentrack/fermentrack/log/fermentrack.log\n\n\n\n\nLogs are rotated every 2MB and the last 5 are saved with a number suffix.", 
            "title": "Architecture"
        }, 
        {
            "location": "/about/architecture/#the-fermentrack-architecture", 
            "text": "The Fermentrack stack is based on a front end application, a controller, and a firmware\nrunning on the device that handles reading temperatures, switching cooling and heating etc.\nEverything but the firmware part is running under a process manager which takes care of\nlaunching the front end and brewpi.py controller scripts.   See  components  documentation for links and licenses.", 
            "title": "The Fermentrack architecture"
        }, 
        {
            "location": "/about/architecture/#the-webserver-nginx-and-chaussette-wsgi-server", 
            "text": "Used to proxy http requests to chaussette over WSGI to the Fermentrack django application.", 
            "title": "The webserver nginx and chaussette WSGI server"
        }, 
        {
            "location": "/about/architecture/#cron", 
            "text": "Used to start the Fermentrack stack, it starts the Circus process manager via a @reboot job,\nit also checks the status of circus every 10 seconds, if it not running it will start it.\nAll this is handled by a script:  updateCronCircus.sh  Supports the following arguments:  {start|stop|status|startifstopped|add2cron}  where:   start  - will start circusd and all the services  stop  - will quit circusd and all processes (note it would be started again in 10 minutes)  status  - will output a status of all processes running (see below)  startifstopped  - will start the process manager if stopped (called from cron every 10 minutes)  add2cron  - if crontab entries are missing, it will add them back.   Crontab entries added with  add2cron :  @reboot ~/fermentrack/brewpi-script/utils/updateCronCircus.sh start\n*/10 * * * * ~/fermentrack/brewpi-script/utils/updateCronCircus.sh startifstopped  Example  status  output:  $ ~/fermentrack/brewpi-script/utils/updateCronCircus.sh status\nFermentrack: active\nbrewpi-spawner: active\ncircusd-stats: active\ndev-brewpi1: active", 
            "title": "cron"
        }, 
        {
            "location": "/about/architecture/#the-process-manager-circus", 
            "text": "Fermentrack is started at boot with the help of cron (see  cron ), the process manager handles\nall the different processes needed by Fermentrack.   Fermentrack  - The django application (web interface) runs under chaussette  brewpi-spawner  - An internal Fermentrack process for spawning controller scripts for controlling controllers like brewpi-esp8266.  circusd-stats  - An Internal circus process for stats, not used yet.  dev-brewpi1  - Is a controller script spawned by brewpi-spawner, handing a controller.   Circus documentation can be found  here .", 
            "title": "The process manager circus"
        }, 
        {
            "location": "/about/architecture/#logging", 
            "text": "Circus process manager logs:  /home/fermentrack/fermentrack/log/circusd.log    Controller script (brewpi.py) log:   /home/fermentrack/fermentrack/log/dev-[name]-stdout.log    Controller script (brewpi.py) error/info log:  /home/fermentrack/fermentrack/log/dev-[name]-stderr.log  Controller script spawner:  /home/fermentrack/fermentrack/log/fermentrack-brewpi-spawner.log  Fermentrack django application:  /home/fermentrack/fermentrack/log/fermentrack.log   Logs are rotated every 2MB and the last 5 are saved with a number suffix.", 
            "title": "Logging"
        }, 
        {
            "location": "/about/contribute/", 
            "text": "Contributing to Fermentrack\n\n\nWant to help? Awesome! There are a number of ways you can get involved in this project. To help you get started, some areas in which you can contribute are listed below along with additional resources for getting started.\n\n\nReporting Bugs/Issues\n\n\nFound a bug or issue (or have a suggestion for how to improve)? Awesome!\n\n\nThe best way to reach out is to either \nopen an issue on GitHub\n or discuss your issue or idea in the HomeBrewTalk thread. Both of these are actively monitored, and will help to keep track of progress towards a resolution.\n\n\nDeveloping Fermentrack\n\n\nInterested in helping develop Fermentrack (or improving its look \n feel)? Fantastic - Fermentrack is an open source project, and all help is welcome.\n\n\nFermentrack is a Python-based application which uses the Django framework. It is open source and is managed on GitHub. To help you get started, \ndocumentation has been included\n discussing topics of interest to developers. Take a look at that first, and if you have questions don't hesitate to reach out.\n\n\nDocumenting Fermentrack\n\n\nA project like Fermentrack is only as good as its documentation. Documentation for Fermentrack is (currently) written in \nMarkdown\n with an eye towards \nMkDocs\n. The documentation is part of the Fermentrack repo on GitHub.\n\n\nIf you are familiar with GitHub, pull requests that include documentation fixes are always welcome. If not, reach out on GitHub or the HomeBrewTalk forums and we'll be happy to help get things updated.", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/contribute/#contributing-to-fermentrack", 
            "text": "Want to help? Awesome! There are a number of ways you can get involved in this project. To help you get started, some areas in which you can contribute are listed below along with additional resources for getting started.", 
            "title": "Contributing to Fermentrack"
        }, 
        {
            "location": "/about/contribute/#reporting-bugsissues", 
            "text": "Found a bug or issue (or have a suggestion for how to improve)? Awesome!  The best way to reach out is to either  open an issue on GitHub  or discuss your issue or idea in the HomeBrewTalk thread. Both of these are actively monitored, and will help to keep track of progress towards a resolution.", 
            "title": "Reporting Bugs/Issues"
        }, 
        {
            "location": "/about/contribute/#developing-fermentrack", 
            "text": "Interested in helping develop Fermentrack (or improving its look   feel)? Fantastic - Fermentrack is an open source project, and all help is welcome.  Fermentrack is a Python-based application which uses the Django framework. It is open source and is managed on GitHub. To help you get started,  documentation has been included  discussing topics of interest to developers. Take a look at that first, and if you have questions don't hesitate to reach out.", 
            "title": "Developing Fermentrack"
        }, 
        {
            "location": "/about/contribute/#documenting-fermentrack", 
            "text": "A project like Fermentrack is only as good as its documentation. Documentation for Fermentrack is (currently) written in  Markdown  with an eye towards  MkDocs . The documentation is part of the Fermentrack repo on GitHub.  If you are familiar with GitHub, pull requests that include documentation fixes are always welcome. If not, reach out on GitHub or the HomeBrewTalk forums and we'll be happy to help get things updated.", 
            "title": "Documenting Fermentrack"
        }, 
        {
            "location": "/about/changelog/", 
            "text": "Changelog\n\n\nAll notable changes to this project will be documented in this file.\n\n\nThe format is based on \nKeep a Changelog\n because it was the first relatively standard format to pop up when I googled \"changelog formats\".\n\n\n[Unversioned]\n\n\nAdded\n\n\n\n\nAdded fermentation controller \"Manage Device\" page\n\n\nUpgrades are now logged to upgrade.log\n\n\nController \"stdout\" and \"stderr\" logs are now saved/accessible\n\n\nSupport for serial devices\n\n\nSupport for Arduino-based devices\n\n\nSupport for in-app git branch switching\n\n\nAutodetection of serial devices\n\n\nCelery (delayed/scheduled task) support (currently unused)\n\n\nControllers connected via serial can now have their serial port autodetected using the udev serial number \n\n\nBeer profiles are now displayed in graph form\n\n\nFirmware can now be flashed to new Arduino \n ESP8266-based controllers from within the app\n\n\nPreferred timezone can now be selected for use throughout Fermentrack\n\n\nBeer log management (deletion/downloading)\n\n\nAdded configuration options for graph line colors\n\n\nGraph lines can be toggled by clicking the icon in the legend\n\n\n\n\nChanged\n\n\n\n\nInversion flag for installed devices is now shown on the \"configure pins/sensors\" page\n\n\nForm errors are now displayed on \"configure pins/sensors\" page\n\n\nBeer logs are no longer deleted along with the parent device (but they will become inaccessible from within Fermentrack)\n\n\nGitHub updates are no longer triggered automatically by visiting the update page, and must now be manually triggered by clicking a button\n\n\nThe IP address of a BrewPiDevice is now cached, and can be used if mDNS stops working\n\n\nAt end of a fermentation profile the controller will now be switched to beer constant mode\n\n\nAll data points are now explicitly recorded in UTC\n\n\nAdded icon to graph legend to display line color\n\n\n\n\nFixed\n\n\n\n\nInversion state no longer improperly defaults\n\n\nMinimum graph size adjusted to account for smaller displays\n\n\nChanged on_delete behavior to allow deletion of fermentation controllers\n\n\nGit update check will now properly wait between checks if up to date\n\n\nGIT_UPDATE_TYPE of 'none' will now properly disable update checks\n\n\nBrewPi controllers now accept unicode names\n\n\n\"View Room Temp\" link on Dashboard now functions\n\n\nRoom temp now included in legend for graphs\n\n\n\n\n[0.1.0] - 2017-03-17 - \"v1 release\"\n\n\nAdded\n\n\n\n\nFirst release!", 
            "title": "Changelog"
        }, 
        {
            "location": "/about/changelog/#changelog", 
            "text": "All notable changes to this project will be documented in this file.  The format is based on  Keep a Changelog  because it was the first relatively standard format to pop up when I googled \"changelog formats\".", 
            "title": "Changelog"
        }, 
        {
            "location": "/about/changelog/#unversioned", 
            "text": "", 
            "title": "[Unversioned]"
        }, 
        {
            "location": "/about/changelog/#added", 
            "text": "Added fermentation controller \"Manage Device\" page  Upgrades are now logged to upgrade.log  Controller \"stdout\" and \"stderr\" logs are now saved/accessible  Support for serial devices  Support for Arduino-based devices  Support for in-app git branch switching  Autodetection of serial devices  Celery (delayed/scheduled task) support (currently unused)  Controllers connected via serial can now have their serial port autodetected using the udev serial number   Beer profiles are now displayed in graph form  Firmware can now be flashed to new Arduino   ESP8266-based controllers from within the app  Preferred timezone can now be selected for use throughout Fermentrack  Beer log management (deletion/downloading)  Added configuration options for graph line colors  Graph lines can be toggled by clicking the icon in the legend", 
            "title": "Added"
        }, 
        {
            "location": "/about/changelog/#changed", 
            "text": "Inversion flag for installed devices is now shown on the \"configure pins/sensors\" page  Form errors are now displayed on \"configure pins/sensors\" page  Beer logs are no longer deleted along with the parent device (but they will become inaccessible from within Fermentrack)  GitHub updates are no longer triggered automatically by visiting the update page, and must now be manually triggered by clicking a button  The IP address of a BrewPiDevice is now cached, and can be used if mDNS stops working  At end of a fermentation profile the controller will now be switched to beer constant mode  All data points are now explicitly recorded in UTC  Added icon to graph legend to display line color", 
            "title": "Changed"
        }, 
        {
            "location": "/about/changelog/#fixed", 
            "text": "Inversion state no longer improperly defaults  Minimum graph size adjusted to account for smaller displays  Changed on_delete behavior to allow deletion of fermentation controllers  Git update check will now properly wait between checks if up to date  GIT_UPDATE_TYPE of 'none' will now properly disable update checks  BrewPi controllers now accept unicode names  \"View Room Temp\" link on Dashboard now functions  Room temp now included in legend for graphs", 
            "title": "Fixed"
        }, 
        {
            "location": "/about/changelog/#010-2017-03-17-v1-release", 
            "text": "", 
            "title": "[0.1.0] - 2017-03-17 - \"v1 release\""
        }, 
        {
            "location": "/about/changelog/#added_1", 
            "text": "First release!", 
            "title": "Added"
        }, 
        {
            "location": "/about/license/", 
            "text": "MIT License\n\nCopyright (c) 2016-2017 John Beeler\nCopyright (c) 2016-2017 Fredrik Steen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \nSoftware\n), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/about/components/", 
            "text": "Included Components \n Licensing\n\n\nFermentrack was built using the Django web framework in Python. As a web application, it contains a number of JavaScript, CSS, and other components to help provide additional functionality. Some of these packages include the following.\n\n\nPython Packages\n\n\nIn addition to Django, this app utilizes a number of Python packages. These packages include:\n\n\n\n\n\n\n\n\nPackage\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nDjango\n\n\nBSD 3 Clause\n\n\n\n\n\n\nconfigobj\n\n\nBSD 3 Clause\n\n\n\n\n\n\npyserial\n\n\nBSD 3 Clause\n\n\n\n\n\n\ncelery\n\n\nBSD 3 Clause\n\n\n\n\n\n\ndjango-celery-beat\n\n\nBSD 3 Clause\n\n\n\n\n\n\nraven\n\n\nBSD 3 Clause\n\n\n\n\n\n\ndjango-constance\n\n\nBSD 3 Clause\n\n\n\n\n\n\nGitPython\n\n\nBSD 3 Clause\n\n\n\n\n\n\nsimplejson\n\n\nMIT (Expat)\n\n\n\n\n\n\npytz\n\n\nMIT (Expat) License\n\n\n\n\n\n\nzeroconf\n\n\nLGPL v2\n\n\n\n\n\n\npyudev\n\n\nLGPL v2.1\n\n\n\n\n\n\ncircus\n\n\nApache Public License v2\n\n\n\n\n\n\ncircus-web\n\n\nApache Public License v2\n\n\n\n\n\n\nchaussette\n\n\nApache Public License v2\n\n\n\n\n\n\npid\n\n\nApache Public License v2\n\n\n\n\n\n\n\n\nJavaScript Packages\n\n\nFermentrack provides some of its functionality using JavaScript. Some of the third party JavaScript packages used within Fermentrack include:\n\n\n\n\n\n\n\n\nPackage\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\njQuery\n\n\nMIT (Expat)\n\n\n\n\n\n\nvue.js\n\n\nMIT (Expat)\n\n\n\n\n\n\nDygraph\n\n\nMIT (Expat)\n\n\n\n\n\n\nMoment\n\n\nMIT (Expat)\n\n\n\n\n\n\nMoment Timezone\n\n\nMIT (Expat)\n\n\n\n\n\n\nRespond.js\n\n\nMIT (Expat)\n\n\n\n\n\n\nhtml5shiv.js\n\n\nMIT (Expat)\n\n\n\n\n\n\n\n\nUI (CSS, Fonts, etc.) Packages\n\n\nIn addition to Python and JavaScript packages, Fermentrack utilizes a handful of third party images, icon packs, CSS files, and fonts in rendering the user interface. Some of these include:\n\n\n\n\n\n\n\n\nPackage\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nFontAwesome (Font)\n\n\nSIL OFL 1.1\n\n\n\n\n\n\nFontAwesome (CSS)\n\n\nMIT (Expat)\n\n\n\n\n\n\nBootstrap\n\n\nMIT (Expat)\n\n\n\n\n\n\nFlatUI\n\n\nMIT (Expat)\n\n\n\n\n\n\n5x8 LCD Font\n\n\nCreative Commons By-SA 3.0\n\n\n\n\n\n\n\n\nSeparate Applications\n\n\nFermentrack is designed to help install or manage communications with certain key applications. These applications are not incorporated into Fermentrack but may be bundled with the software as a convenience.\n\n\n\n\n\n\n\n\nPackage\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nBrewPi-Script\n\n\nGPL v3\n\n\n\n\n\n\nBrewPi Firmware\n\n\nGPL v3 (and potentially others)", 
            "title": "Included Components"
        }, 
        {
            "location": "/about/components/#included-components-licensing", 
            "text": "Fermentrack was built using the Django web framework in Python. As a web application, it contains a number of JavaScript, CSS, and other components to help provide additional functionality. Some of these packages include the following.", 
            "title": "Included Components &amp; Licensing"
        }, 
        {
            "location": "/about/components/#python-packages", 
            "text": "In addition to Django, this app utilizes a number of Python packages. These packages include:     Package  License      Django  BSD 3 Clause    configobj  BSD 3 Clause    pyserial  BSD 3 Clause    celery  BSD 3 Clause    django-celery-beat  BSD 3 Clause    raven  BSD 3 Clause    django-constance  BSD 3 Clause    GitPython  BSD 3 Clause    simplejson  MIT (Expat)    pytz  MIT (Expat) License    zeroconf  LGPL v2    pyudev  LGPL v2.1    circus  Apache Public License v2    circus-web  Apache Public License v2    chaussette  Apache Public License v2    pid  Apache Public License v2", 
            "title": "Python Packages"
        }, 
        {
            "location": "/about/components/#javascript-packages", 
            "text": "Fermentrack provides some of its functionality using JavaScript. Some of the third party JavaScript packages used within Fermentrack include:     Package  License      jQuery  MIT (Expat)    vue.js  MIT (Expat)    Dygraph  MIT (Expat)    Moment  MIT (Expat)    Moment Timezone  MIT (Expat)    Respond.js  MIT (Expat)    html5shiv.js  MIT (Expat)", 
            "title": "JavaScript Packages"
        }, 
        {
            "location": "/about/components/#ui-css-fonts-etc-packages", 
            "text": "In addition to Python and JavaScript packages, Fermentrack utilizes a handful of third party images, icon packs, CSS files, and fonts in rendering the user interface. Some of these include:     Package  License      FontAwesome (Font)  SIL OFL 1.1    FontAwesome (CSS)  MIT (Expat)    Bootstrap  MIT (Expat)    FlatUI  MIT (Expat)    5x8 LCD Font  Creative Commons By-SA 3.0", 
            "title": "UI (CSS, Fonts, etc.) Packages"
        }, 
        {
            "location": "/about/components/#separate-applications", 
            "text": "Fermentrack is designed to help install or manage communications with certain key applications. These applications are not incorporated into Fermentrack but may be bundled with the software as a convenience.     Package  License      BrewPi-Script  GPL v3    BrewPi Firmware  GPL v3 (and potentially others)", 
            "title": "Separate Applications"
        }, 
        {
            "location": "/develop/", 
            "text": "Developing (for) Fermentrack\n\n\nFermentrack is an open source, Python-based application that was written using the \nDjango\n framework. The project is managed on GitHub.\n\n\nAny assistance with developing Fermentrack is welcome. It is recommended that you check with the main developers before starting work on a major feature to prevent duplication of efforts, but all pull requests are welcome and will be reviewed.\n\n\nTo help with developing for Fermentrack, some documentation of the project is below:\n\n\n\n\nModels Documentation", 
            "title": "Index"
        }, 
        {
            "location": "/develop/#developing-for-fermentrack", 
            "text": "Fermentrack is an open source, Python-based application that was written using the  Django  framework. The project is managed on GitHub.  Any assistance with developing Fermentrack is welcome. It is recommended that you check with the main developers before starting work on a major feature to prevent duplication of efforts, but all pull requests are welcome and will be reviewed.  To help with developing for Fermentrack, some documentation of the project is below:   Models Documentation", 
            "title": "Developing (for) Fermentrack"
        }, 
        {
            "location": "/develop/models/", 
            "text": "Fermentrack models\n\n\nTODO - Write this", 
            "title": "Models"
        }, 
        {
            "location": "/develop/models/#fermentrack-models", 
            "text": "", 
            "title": "Fermentrack models"
        }, 
        {
            "location": "/develop/models/#todo-write-this", 
            "text": "", 
            "title": "TODO - Write this"
        }
    ]
}